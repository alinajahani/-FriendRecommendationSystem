import random

def addUniq(ll, elm):
  '''(list, any) -> list
  Adds elm to ll if it is not already in there.
  Returns ll for chaining.
  '''
  if not elm in ll:
    ll += [elm] 
  return ll

def get_slot(user, network):
  '''(int, 2D list)->list or None
  Tries to find the tuple for the given user in the network.
  If not found, returns None.
  '''
  for _net in network:
    if _net[0] == user:
      return _net

def create_network(file_name):
  '''(str)->list of tuples where each tuple has 2 elements the first is int and the second is list of int

  Precondition: file_name has data on social netowrk. In particular:
  The first line in the file contains the number of users in the social network
  Each line that follows has two numbers. The first is a user ID (int) in the social network,
  the second is the ID of his/her friend.
  The friendship is only listed once with the user ID always being smaller than friend ID.
  For example, if 7 and 50 are friends there is a line in the file with 7 50 entry, but there is line 50 7.
  There is no user without a friend
  Users sorted by ID, friends of each user are sorted by ID
  Returns the 2D list representing the frendship nework as described above
  where the network is sorted by the ID and each list of int (in a tuple) is sorted (i.e. each list of friens is sorted).
  '''
  friends = open(file_name).read().splitlines()[1:]
  network = []
  networkMap = []

  # figure out all possible people
  for i in range(len(friends)):
    friends[i] = friends[i].split(' ')

    friends[i][0] = int(friends[i][0])
    friends[i][1] = int(friends[i][1])

    addUniq(networkMap, friends[i][0])
    addUniq(networkMap, friends[i][1])

  # sort the list of possible people
  networkMap.sort()

  # create placeholders in our network
  for f in networkMap:
    network += [(f, [])]

  # now start adding relationships, regardless of who
  # is on the left or right
  for i in range(len(friends)):
    a = friends[i][0]
    b = friends[i][1]

    n = networkMap.index(a)
    addUniq(network[n][1], b).sort()

    n = networkMap.index(b)
    addUniq(network[n][1], a).sort()

  return network

def getCommonFriends(user1, user2, network):
  '''(int, int, 2D list) ->int
  Precondition: user1 and user2 IDs in the network. 2D list sorted by the IDs, 
  and friends of user 1 and user 2 sorted 
  Given a 2D-list for friendship network, returns the sorted list of common friends of user1 and user2
  '''

  listA = listB = None

  # find the friends list for each user
  for _net in network: # n
    if _net[0] == user1:
      listA = _net[1]
    elif _net[0] == user2:
      listB = _net[1]
    
    if listA != None and listB != None:
      break

  common = []

  # if one of the two do not exist, we return nothing
  if listA == None or listB == None:
    return []

  # figure out what's in a that's also in b
  for a in listA: # n1
    if a in listB: # n2
      addUniq(common, a)

  # O(n1*n2 + n)
  # O(n1 + n2 + logn)

  # sort & return
  return sorted(common)

def recommend(user, network):
  '''(int, 2Dlist)->int or None
  Given a 2D-list for friendship network, returns None if there is no other person
  who has at least one neighbour in common with the given user and who the user does
  not know already.
  
  Otherwise it returns the ID of the recommended friend. A recommended friend is a person
  you are not already friends with and with whom you have the most friends in common in the whole network.
  If there is more than one person with whom you have the maximum number of friends in common
  return the one with the smallest ID. '''

  net = get_slot(user, network)
  
  if net == None:
    return

  net = net[1]
  suggestion = [-1,0]

  # find best neighbour
  for _net in network:
    friend = _net[0]

    if not friend in net:
      common = len(getCommonFriends(friend, user, network))

      if common > suggestion[1]:
        suggestion = [friend, common]
  
  return suggestion[0] if suggestion[0] != -1 else None

def _k_or_more_friends(network, k, orMore):
  '''(2Dlist,int)->int
  Given a 2D-list for friendship network and non-negative integer k,
  returns the users who have at least k friends in the network (if orMore is true)
  otherwise exactly k friends
  Precondition: k is non-negative'''
  
  ppl = []

  for net in network:
    if (orMore and len(net[1]) >= k) or (not orMore and len(net[1]) == k):
      ppl += [net[0]]

  return ppl

def k_or_more_friends(network, k):
  '''(2Dlist,int)->int
  Given a 2D-list for friendship network and non-negative integer k,
  returns the number of users who have at least k friends in the network
  Precondition: k is non-negative'''
  return len(_k_or_more_friends(network, k, True))

def maximum_num_friends(network):
  '''(2Dlist)->int
  Given a 2D-list for friendship network,
  returns the maximum number of friends any user in the network has.
  '''
  
  huge = 0

  for net in network:
    huge = max(huge, len(net[1]))

  return huge

def people_with_most_friends(network):
  '''(2Dlist)->1D list
  Given a 2D-list for friendship network, returns a list of people (IDs) who have the most friends in network.'''
  return _k_or_more_friends(network, maximum_num_friends(network), False)

def average_num_friends(network):
  '''(2Dlist)->number
  Returns an average number of friends overs all users in the network'''

  avg = 0

  for net in network:
    avg += len(net[1])

  return avg / len(network)

def knows_everyone(network):
  '''(2Dlist)->bool
  Given a 2D-list for friendship network,
  returns True if there is a user in the network who knows everyone
  and False otherwise'''
  
  # can't be friends with yourself
  N = len(network) - 1

  for net in network:
    if len(net[1]) == N:
      return True
  
  return False

####### CHATTING WITH USER CODE:

def is_valid_file_name():
  '''None->str or None'''
  file_name = None
  try:
      file_name=input("Enter the name of the file: ").strip()
      f=open(file_name)
      f.close()
  except FileNotFoundError:
      print("There is no file with that name. Try again.")
      file_name=None
  return file_name 

def get_file_name():
  '''()->str
  Keeps on asking for a file name that exists in the current folder,
  until it succeeds in getting a valid file name.
  Once it succeeds, it returns a string containing that file name'''
  file_name=None
  while file_name==None:
      file_name=is_valid_file_name()
  return file_name


def get_uid(network):
  '''()->int
  Keeps on asking for a user ID that exists in the network
  until it succeeds. Then it returns it'''
  
  while True:
    uid = input('Enter an integer for a user ID:')

    try:
      uid = int(uid.strip())

      if get_slot(uid, network) == None:
        print('That user ID does not exist. Try again.')
      else:
        return uid
    except:
      print('That was not an integer. Please try again.')


##############################
# main
##############################

# NOTHING FOLLOWING THIS LINE CAN BE REMOVED or MODIFIED

file_name=get_file_name()
    
net=create_network(file_name)

print("\nFirst general statistics about the social network:\n")

print("This social network has", len(net), "people/users.")
print("In this social network the maximum number of friends that any one person has is "+str(maximum_num_friends(net))+".")
print("The average number of friends is "+str(average_num_friends(net))+".")
mf=people_with_most_friends(net)
print("There are", len(mf), "people with "+str(maximum_num_friends(net))+" friends and here are their IDs:", end=" ")
for item in mf:
    print(item, end=" ")

print("\n\nI now pick a number at random.", end=" ")
k=random.randint(0,len(net)//4)
print("\nThat number is: "+str(k)+". Let's see how many people has that many friends.")
print("There is", k_or_more_friends(net,k), "people with", k, "or more friends")

if knows_everyone(net):
    print("\nThere at least one person that knows everyone.")
else:
    print("\nThere is nobody that knows everyone.")

print("\nWe are now ready to recommend a friend for a user you specify.")
uid=get_uid(net)
rec=recommend(uid, net)
if rec==None:
    print("We have nobody to recommend for user with ID", uid, "since he/she is dominating in their connected component")
else:
    print("For user with ID", uid,"we recommend the user with ID",rec)
    print("That is because users", uid, "and",rec, "have", len(getCommonFriends(uid,rec,net)), "common friends and")
    print("user", uid, "does not have more common friends with anyone else.")
        

print("\nFinally, you showed interest in knowing common friends of some pairs of users.")
print("About 1st user ...")
uid1=get_uid(net)
print("About 2st user ...")
uid2=get_uid(net)
print("Here is the list of common friends of", uid1, "and", uid2)
common=getCommonFriends(uid1,uid2,net)
for item in common:
    print(item, end=" ")
